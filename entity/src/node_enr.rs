//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use ethportal_api::{
    types::enr::Enr, ProtocolInfo, ProtocolVersionList, ENR_PORTAL_KEY, ENR_PROTOCOL_VERSION_KEY,
};
use sea_orm::{entity::prelude::*, NotSet, Set};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "node_enr")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub node_id: i32,
    #[sea_orm(column_type = "Text")]
    pub raw: String,
    pub sequence_number: i64,
    pub min_protocol_version: Option<i16>,
    pub max_protocol_version: Option<i16>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::audit_transfer_failure::Entity")]
    AuditTransferFailure,
    #[sea_orm(has_many = "super::census_node::Entity")]
    CensusNode,
    #[sea_orm(
        belongs_to = "super::node::Entity",
        from = "Column::NodeId",
        to = "super::node::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Node,
}

impl Related<super::audit_transfer_failure::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuditTransferFailure.def()
    }
}

impl Related<super::census_node::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CensusNode.def()
    }
}

impl Related<super::node::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Node.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

// *** Custom additions ***

pub async fn get_or_create(enr: &Enr, conn: &DatabaseConnection) -> Result<Model, DbErr> {
    let node_model = super::node::get_or_create(enr.node_id(), conn).await?;
    let seq = enr.seq() as i64;

    // First try to lookup an existing entry.
    if let Some(enr_model) = Entity::find()
        .filter(Column::NodeId.eq(node_model.id))
        .filter(Column::SequenceNumber.eq(seq))
        .one(conn)
        .await?
    {
        // If there is an existing record, return it
        return Ok(enr_model);
    }

    // If no record exists, create one and return it

    let (min_protocol_version, max_protocol_version) = get_min_max_protocol_versions(enr).unzip();
    let enr_model = ActiveModel {
        id: NotSet,
        node_id: Set(node_model.id),
        raw: Set(enr.to_base64()),
        sequence_number: Set(seq),
        min_protocol_version: Set(min_protocol_version.map(i16::from)),
        max_protocol_version: Set(max_protocol_version.map(i16::from)),
    };

    enr_model.insert(conn).await
}

fn get_min_max_protocol_versions(enr: &Enr) -> Option<(u8, u8)> {
    if let Some(Ok(protocol_info)) = enr.get_decodable::<ProtocolInfo>(ENR_PORTAL_KEY) {
        return Some((
            *protocol_info.min_protocol_version(),
            *protocol_info.max_protocol_version(),
        ));
    }

    if let Some(Ok(protocol_version_list)) =
        enr.get_decodable::<ProtocolVersionList>(ENR_PROTOCOL_VERSION_KEY)
    {
        return Option::zip(
            protocol_version_list.iter().min().cloned().map(u8::from),
            protocol_version_list.iter().max().cloned().map(u8::from),
        );
    }

    None
}
