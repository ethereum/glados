//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use sea_orm::{entity::prelude::*, NotSet, Set};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "client")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub version_info: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::audit::Entity")]
    Audit,
}

impl Related<super::audit::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Audit.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

// *** Custom additions ***

pub async fn get_or_create(
    version_info: String,
    conn: &DatabaseConnection,
) -> Result<Model, DbErr> {
    // First try to lookup an existing entry.
    if let Some(client_info) = Entity::find()
        .filter(Column::VersionInfo.eq(version_info.to_owned()))
        .one(conn)
        .await?
    {
        // If there is an existing record, return it
        return Ok(client_info);
    }

    // If no record exists, create one and return it
    let client_info = ActiveModel {
        id: NotSet,
        version_info: Set(version_info.to_owned()),
    };
    client_info.insert(conn).await
}
