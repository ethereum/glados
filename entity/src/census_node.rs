//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.7
use alloy_primitives::U256;
use anyhow::Result;
use chrono::{DateTime, Utc};
use sea_orm::{entity::prelude::*, ActiveValue::NotSet, Set};

use crate::content::SubProtocol;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "census_node")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub census_id: i32,
    pub record_id: i32,
    pub surveyed_at: DateTime<Utc>,
    pub data_radius: Vec<u8>,
    pub data_radius_high: i64,
    pub sub_network: SubProtocol,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::census::Entity",
        from = "Column::CensusId",
        to = "super::census::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Census,
    #[sea_orm(
        belongs_to = "super::record::Entity",
        from = "Column::RecordId"
        to = "super::record::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Record,
}

impl Related<super::census::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Census.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

pub async fn create(
    census_id: i32,
    record_id: i32,
    data_radius: U256,
    surveyed_at: DateTime<Utc>,
    network: SubProtocol,
    conn: &DatabaseConnection,
) -> Result<Model> {
    let data_radius_high: i64 = data_radius.wrapping_shr(193).to::<i64>();
    let data_radius_raw: [u8; 32] = data_radius.to_be_bytes();

    let census = ActiveModel {
        id: NotSet,
        census_id: Set(census_id),
        record_id: Set(record_id),
        surveyed_at: Set(surveyed_at),
        data_radius: Set(data_radius_raw.into()),
        data_radius_high: Set(data_radius_high),
        sub_network: Set(network),
    };

    Ok(census.insert(conn).await?)
}
