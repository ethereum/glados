//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use alloy_primitives::U256;
use ethportal_api::types::ping_extensions::extensions::type_0::ClientInfo;
use sea_orm::{entity::prelude::*, ActiveValue::NotSet, Set};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "census_node")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub census_id: i32,
    pub node_enr_id: i32,
    pub surveyed_at: DateTimeUtc,
    #[sea_orm(column_type = "VarBinary(StringLen::N(32))")]
    pub data_radius: Vec<u8>,
    pub data_radius_high: i64,
    #[sea_orm(column_type = "Text", nullable)]
    pub client_name: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub client_version: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub short_commit: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub operating_system: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub cpu_architecture: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub programming_language_version: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::census::Entity",
        from = "Column::CensusId",
        to = "super::census::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Census,
    #[sea_orm(
        belongs_to = "super::node_enr::Entity",
        from = "Column::NodeEnrId",
        to = "super::node_enr::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    NodeEnr,
}

impl Related<super::census::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Census.def()
    }
}

impl Related<super::node_enr::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::NodeEnr.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

// *** Custom additions ***

pub async fn create(
    census_id: i32,
    node_enr_id: i32,
    surveyed_at: DateTimeUtc,
    data_radius: U256,
    client_info: &ClientInfo,
    conn: &DatabaseConnection,
) -> Result<Model, DbErr> {
    let data_radius_raw: [u8; 32] = data_radius.to_be_bytes();
    let data_radius_high: i64 = data_radius.wrapping_shr(193).to::<i64>();

    let str_to_optional_fn = |s: &str| -> Option<String> {
        if s.is_empty() {
            None
        } else {
            Some(s.to_string())
        }
    };

    let census = ActiveModel {
        id: NotSet,
        census_id: Set(census_id),
        node_enr_id: Set(node_enr_id),
        surveyed_at: Set(surveyed_at),
        data_radius: Set(data_radius_raw.to_vec()),
        data_radius_high: Set(data_radius_high),
        client_name: Set(str_to_optional_fn(&client_info.client_name)),
        client_version: Set(str_to_optional_fn(&client_info.client_version)),
        short_commit: Set(str_to_optional_fn(&client_info.short_commit)),
        operating_system: Set(str_to_optional_fn(&client_info.operating_system)),
        cpu_architecture: Set(str_to_optional_fn(&client_info.cpu_architecture)),
        programming_language_version: Set(str_to_optional_fn(
            &client_info.programming_language_version,
        )),
    };

    census.insert(conn).await
}
