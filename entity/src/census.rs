//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use chrono::Duration;
use sea_orm::{entity::prelude::*, NotSet, Set};

use crate::SubProtocol;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "census")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub sub_protocol: SubProtocol,
    #[sea_orm(unique)]
    pub started_at: DateTimeUtc,
    pub duration: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::census_node::Entity")]
    CensusNode,
}

impl Related<super::census_node::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CensusNode.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

// *** Custom additions ***

pub async fn create(
    started_at: DateTimeUtc,
    duration: Duration,
    sub_protocol: SubProtocol,
    conn: &DatabaseConnection,
) -> Result<Model, DbErr> {
    // If no record exists, create one and return it
    let census = ActiveModel {
        id: NotSet,
        sub_protocol: Set(sub_protocol),
        started_at: Set(started_at),
        duration: Set(duration.num_seconds()),
    };

    census.insert(conn).await
}
