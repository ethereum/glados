//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use sea_orm::{entity::prelude::*, sea_query::OnConflict, ActiveValue::Set};

use crate::audit;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "audit_latest")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub content_id: i32,
    pub audit_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::audit::Entity",
        from = "Column::ContentId",
        to = "super::audit::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Audit,
    #[sea_orm(
        belongs_to = "super::content::Entity",
        from = "Column::ContentId",
        to = "super::content::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Content,
}

impl Related<super::audit::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Audit.def()
    }
}

impl Related<super::content::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Content.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

// *** Custom additions ***

pub async fn create<C: ConnectionTrait>(audit: &audit::Model, conn: &C) -> Result<Model, DbErr> {
    let audit_latest = ActiveModel {
        content_id: Set(audit.content_id),
        audit_id: Set(audit.id),
    };
    Entity::insert(audit_latest)
        .on_conflict(
            OnConflict::column(Column::ContentId)
                .update_column(Column::AuditId)
                .to_owned(),
        )
        .exec_with_returning(conn)
        .await
}
