//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use chrono::{DateTime, Utc};
use sea_orm::{
    entity::prelude::*,
    strum::{EnumMessage, EnumString},
};
use serde::Deserialize;

use crate::content_audit::AuditResult;

// Not using the constants in ethportal-api because seaorm does not support DeriveActiveEnum from a
// variable
#[derive(
    Debug,
    Clone,
    Copy,
    Eq,
    PartialEq,
    EnumIter,
    DeriveActiveEnum,
    Deserialize,
    EnumMessage,
    EnumString,
)]
#[sea_orm(rs_type = "u8", db_type = "Integer")]
#[strum(serialize_all = "snake_case")]
pub enum ContentType {
    #[strum(message = "Block headers by hash")]
    BlockHeadersByHash = 0,
    #[strum(message = "Block bodies")]
    BlockBodies = 1,
    #[strum(message = "Block receipts")]
    BlockReceipts = 2,
    #[strum(message = "Block headers by number")]
    BlockHeadersByNumber = 3,
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "audit_result_latest")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub content_id: i32,
    pub last_audited: DateTime<Utc>,
    pub result: AuditResult,
    pub first_available_at: DateTime<Utc>,
    pub content_type: ContentType,
    #[sea_orm(unique)]
    pub content_key: Vec<u8>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
