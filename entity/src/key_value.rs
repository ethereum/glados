//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.7
use anyhow::Result;

use sea_orm::{entity::prelude::*, ActiveValue::NotSet, Set};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "key_value")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub record_id: i32,
    pub key: Vec<u8>,
    pub value: Vec<u8>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::record::Entity",
        from = "Column::RecordId",
        to = "super::record::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Record,
}

impl Related<super::record::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Record.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

pub async fn get_or_create(
    record_id: i32,
    enr_key: &Vec<u8>,
    enr_value: &Vec<u8>,
    conn: &DatabaseConnection,
) -> Result<Model> {
    // First try to lookup an existing entry.
    if let Some(key_value_model) = Entity::find()
        .filter(Column::RecordId.eq(record_id))
        .filter(Column::Key.eq(enr_key.to_owned()))
        .one(conn)
        .await?
    {
        // TODO: make this part work.
        //if key_value_model.value != enr_value {
        //    key_value_model.value = Set(enr_value);
        //    key_value_model.update(conn).await.unwrap();
        //}
        // If there is an existing record, return it
        return Ok(key_value_model);
    }

    // If no record exists, create one and return it
    let key_value_model = ActiveModel {
        id: NotSet,
        record_id: Set(record_id),
        key: Set(enr_key.to_owned()),
        value: Set(enr_value.to_owned()),
    };
    Ok(key_value_model.insert(conn).await?)
}
