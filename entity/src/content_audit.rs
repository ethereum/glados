//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.7
use crate::content;
use crate::utils;
use anyhow::{bail, Result};
use chrono::{DateTime, Utc};
use clap::ValueEnum;
use content::SubProtocol;
use ethportal_api::{utils::bytes::hex_encode, OverlayContentKey};
use sea_orm::{
    entity::prelude::*, strum::IntoEnumIterator, ActiveValue::NotSet, DbBackend, DeriveActiveEnum,
    FromQueryResult, Set, Statement, TryGetable,
};
use sea_query::{ArrayType, Nullable, SeaRc, ValueType, ValueTypeErr};

#[derive(Debug, Clone, Eq, PartialEq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "i32", db_type = "Integer")]
pub enum AuditResult {
    Failure = 0,
    Success = 1,
}

#[derive(Debug, Clone, Eq, Hash, PartialEq, EnumIter, DeriveActiveEnum, ValueEnum)]
#[clap(rename_all = "snake_case")]
#[sea_orm(rs_type = "i32", db_type = "Integer")]
/// Each strategy is responsible for selecting which content key(s) to begin audits for.
pub enum HistorySelectionStrategy {
    /// Content that is:
    /// 1. Not yet audited
    /// 2. Sorted by date entered into glados database (newest first).
    Latest = 0,
    /// Randomly selected content.
    Random = 1,
    /// Content that looks for failed audits and checks whether the data is still missing.
    /// 1. Key was audited previously
    /// 2. Latest audit for the key failed (data absent)
    /// 3. Keys sorted by date audited (keys with oldest failed audit first)
    Failed = 2,
    /// Content that is:
    /// 1. Not yet audited.
    /// 2. Sorted by date entered into glados database (oldest first).
    SelectOldestUnaudited = 3,
    /// Perform a single audit for a previously audited content key.
    SpecificContentKey = 4,
    /// Perform audits of random fourfours data.
    FourFours = 5,
}

impl From<i32> for HistorySelectionStrategy {
    fn from(value: i32) -> Self {
        match value {
            0 => HistorySelectionStrategy::Latest,
            1 => HistorySelectionStrategy::Random,
            2 => HistorySelectionStrategy::Failed,
            3 => HistorySelectionStrategy::SelectOldestUnaudited,
            4 => HistorySelectionStrategy::SpecificContentKey,
            5 => HistorySelectionStrategy::FourFours,
            _ => panic!("Invalid value for HistorySelectionStrategy"),
        }
    }
}

impl TryFrom<String> for HistorySelectionStrategy {
    type Error = anyhow::Error;
    fn try_from(value: String) -> Result<Self, Self::Error> {
        match value.as_str() {
            "Latest" => Ok(HistorySelectionStrategy::Latest),
            "Random" => Ok(HistorySelectionStrategy::Random),
            "Failed" => Ok(HistorySelectionStrategy::Failed),
            "SelectOldestUnaudited" => Ok(HistorySelectionStrategy::SelectOldestUnaudited),
            "SpecificContentKey" => Ok(HistorySelectionStrategy::SpecificContentKey),
            "FourFours" => Ok(HistorySelectionStrategy::FourFours),
            _ => bail!("Invalid value for HistorySelectionStrategy {}", value),
        }
    }
}

#[derive(Debug, Clone, Eq, Hash, PartialEq)]
pub enum SelectionStrategy {
    History(HistorySelectionStrategy),
}

impl From<SelectionStrategy> for Value {
    fn from(strategy: SelectionStrategy) -> Self {
        Value::Int(Some(strategy.to_value()))
    }
}

impl Nullable for SelectionStrategy {
    fn null() -> Value {
        Value::Int(None)
    }
}

impl ValueType for SelectionStrategy {
    fn try_from(v: Value) -> Result<Self, ValueTypeErr> {
        match v {
            Value::Int(Some(value)) => match value >> 16 {
                0 => Ok(SelectionStrategy::History(HistorySelectionStrategy::from(
                    value & 0xFFFF,
                ))),
                _ => Err(ValueTypeErr),
            },
            _ => Err(ValueTypeErr),
        }
    }

    fn type_name() -> String {
        stringify!(SelectionStrategy).to_owned()
    }

    fn array_type() -> ArrayType {
        ArrayType::Int
    }

    fn column_type() -> ColumnType {
        ColumnType::Integer
    }
}

impl IntoEnumIterator for SelectionStrategy {
    type Iterator = std::vec::IntoIter<Self>;

    fn iter() -> Self::Iterator {
        [HistorySelectionStrategy::iter()
            .map(SelectionStrategy::History)
            .collect::<Vec<_>>()]
        .concat()
        .into_iter()
    }
}

#[derive(Debug, Iden)]
#[iden = "selection_strategy"]
pub struct SelectionStrategyEnum;

impl ActiveEnum for SelectionStrategy {
    type Value = i32;

    type ValueVec = Vec<Self::Value>;

    fn name() -> sea_orm::DynIden {
        SeaRc::new(SelectionStrategyEnum)
    }

    fn to_value(&self) -> Self::Value {
        match self {
            SelectionStrategy::History(h) => h.to_value(),
        }
    }

    fn try_from_value(v: &Self::Value) -> std::prelude::v1::Result<Self, DbErr> {
        HistorySelectionStrategy::try_from_value(v).map(SelectionStrategy::History)
    }

    fn db_type() -> ColumnDef {
        ColumnType::Integer.def()
    }
}

impl TryGetable for SelectionStrategy {
    fn try_get_by<I: sea_orm::ColIdx>(
        res: &QueryResult,
        index: I,
    ) -> std::prelude::v1::Result<Self, sea_orm::TryGetError> {
        let value = i32::try_get_by(res, index)?;
        SelectionStrategy::try_from_value(&value).map_err(|_| {
            sea_orm::TryGetError::DbErr(DbErr::Type(
                "Invalid value for SelectionStrategy".to_string(),
            ))
        })
    }
}

impl AuditResult {
    pub fn as_text(&self) -> String {
        match self {
            AuditResult::Failure => "fail".to_string(),
            AuditResult::Success => "success".to_string(),
        }
    }
}

#[derive(FromQueryResult)]
struct FailedKeysResult {
    content_key: Vec<u8>,
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "content_audit")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub content_key: i32,
    pub client_info: Option<i32>,
    pub node: Option<i32>,
    pub created_at: DateTime<Utc>,
    pub strategy_used: Option<SelectionStrategy>,
    pub result: AuditResult,
    pub trace: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::content::Entity",
        from = "Column::ContentKey",
        to = "super::content::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Content,
    #[sea_orm(
        belongs_to = "super::client_info::Entity",
        from = "Column::ClientInfo",
        to = "super::client_info::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    ClientInfo,
    #[sea_orm(
        belongs_to = "super::node::Entity",
        from = "Column::Node",
        to = "super::node::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Node,
}

impl Related<super::content::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Content.def()
    }
}

impl Related<super::client_info::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ClientInfo.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

pub async fn create(
    content_key_model_id: i32,
    client_info_id: i32,
    node_id: i32,
    query_successful: bool,
    strategy_used: SelectionStrategy,
    trace_string: String,
    conn: &DatabaseConnection,
) -> Result<Model> {
    // If no record exists, create one and return it
    let audit_result = if query_successful {
        AuditResult::Success
    } else {
        AuditResult::Failure
    };

    let content_audit = ActiveModel {
        id: NotSet,
        content_key: Set(content_key_model_id),
        client_info: Set(Some(client_info_id)),
        node: Set(Some(node_id)),
        created_at: Set(Utc::now()),
        result: Set(audit_result),
        strategy_used: Set(Some(strategy_used)),
        trace: Set(trace_string),
    };
    Ok(content_audit.insert(conn).await?)
}

pub async fn get_audits<T: OverlayContentKey>(
    content_key: &T,
    conn: &DatabaseConnection,
) -> Result<Vec<Model>> {
    let Some(content_key_model) = content::get(content_key, conn).await? else {
        bail!("Expected stored content_key found none.")
    };
    Ok(Entity::find()
        .filter(Column::ContentKey.eq(content_key_model.id))
        .all(conn)
        .await?)
}

pub async fn get_failed_keys(
    subprotocol: SubProtocol,
    strategy_used: String,
    page: u32,
    conn: &DatabaseConnection,
) -> Result<Vec<String>> {
    const PAGE_SIZE: u32 = 1000;

    let subprotocol_strategy: SelectionStrategy = match subprotocol {
        SubProtocol::History => SelectionStrategy::History(strategy_used.try_into()?),
    };

    let keys_result = FailedKeysResult::find_by_statement(Statement::from_sql_and_values(
        DbBackend::Postgres,
        "
        SELECT
              content.content_key
        FROM content_audit
        INNER JOIN content ON content.id = content_audit.content_key
        WHERE
            content_audit.result = 0 AND
            content_audit.strategy_used = $1 AND
            content_audit.created_at >= CURRENT_TIMESTAMP - INTERVAL '24 hours'
        GROUP BY content.content_key
        ORDER BY MAX(content_audit.created_at) DESC
        LIMIT $2
        OFFSET $3
          content_key
        FROM (
          SELECT
            content.content_key,
            MAX(content_audit.created_at) AS created_at
          FROM content_audit
          JOIN content ON content.id = content_audit.content_key
          WHERE
            content_audit.result = 0  AND
            content_audit.strategy_used = $1 AND
            content_audit.created_at >= CURRENT_TIMESTAMP - INTERVAL '24 hours'
          GROUP BY content.content_key
        ) prep
        ORDER BY created_at DESC
        LIMIT $2
        OFFSET $3
        ",
        vec![
            subprotocol_strategy.into(),
            PAGE_SIZE.into(),
            ((page - 1) * PAGE_SIZE).into(),
        ],
    ))
    .all(conn)
    .await?;

    Ok(keys_result
        .into_iter()
        .map(|result_item| hex_encode(result_item.content_key))
        .collect::<Vec<String>>())
}

impl SelectionStrategy {
    /// This performs the function of Display, which is not able to be implemented
    /// for this enum.
    ///
    /// SelectionStrategy derive macro DeriveActiveEnum introduces a conflicting
    /// Display implementation.
    pub fn as_text(&self) -> String {
        match self {
            SelectionStrategy::History(HistorySelectionStrategy::Latest) => "Latest".to_string(),
            SelectionStrategy::History(HistorySelectionStrategy::Random) => "Random".to_string(),
            SelectionStrategy::History(HistorySelectionStrategy::Failed) => "Failed".to_string(),
            SelectionStrategy::History(HistorySelectionStrategy::FourFours) => {
                "FourFours".to_string()
            }
            SelectionStrategy::History(HistorySelectionStrategy::SelectOldestUnaudited) => {
                "Select Oldest Unaudited".to_string()
            }
            SelectionStrategy::History(HistorySelectionStrategy::SpecificContentKey) => {
                "Specific Content Key".to_string()
            }
        }
    }
}

impl Model {
    pub fn is_success(&self) -> bool {
        self.result == AuditResult::Success
    }
    pub fn created_at_local_time(&self) -> String {
        self.created_at.with_timezone(&chrono::Local).to_rfc2822()
    }
    pub fn created_at_humanized(&self) -> String {
        utils::time_ago(self.created_at, Utc::now())
    }
    /// A convenience method for displaying the strategy.
    ///
    /// A few early database entries do not have a recorded strategy.
    pub fn strategy_as_text(&self) -> String {
        match &self.strategy_used {
            Some(s) => s.as_text(),
            None => "No strategy recorded".to_string(),
        }
    }
}

#[cfg(test)]
mod tests {
    use sea_orm::{ActiveEnum, Value};

    use super::{HistorySelectionStrategy, SelectionStrategy};

    #[test]
    fn test_selection_strategy_to_value() {
        assert_eq!(
            SelectionStrategy::History(HistorySelectionStrategy::Latest).to_value(),
            0
        );
        assert_eq!(
            SelectionStrategy::History(HistorySelectionStrategy::Random).to_value(),
            1
        );
        assert_eq!(
            SelectionStrategy::History(HistorySelectionStrategy::Failed).to_value(),
            2
        );
        assert_eq!(
            SelectionStrategy::History(HistorySelectionStrategy::SelectOldestUnaudited).to_value(),
            3
        );
        assert_eq!(
            SelectionStrategy::History(HistorySelectionStrategy::SpecificContentKey).to_value(),
            4
        );
        assert_eq!(
            SelectionStrategy::History(HistorySelectionStrategy::FourFours).to_value(),
            5
        );
    }

    #[test]
    fn test_selection_strategy_try_from_value() {
        assert_eq!(
            SelectionStrategy::try_from_value(&0).unwrap(),
            SelectionStrategy::History(HistorySelectionStrategy::Latest)
        );
        assert_eq!(
            SelectionStrategy::try_from_value(&1).unwrap(),
            SelectionStrategy::History(HistorySelectionStrategy::Random)
        );
        assert_eq!(
            SelectionStrategy::try_from_value(&2).unwrap(),
            SelectionStrategy::History(HistorySelectionStrategy::Failed)
        );
        assert_eq!(
            SelectionStrategy::try_from_value(&3).unwrap(),
            SelectionStrategy::History(HistorySelectionStrategy::SelectOldestUnaudited)
        );
        assert_eq!(
            SelectionStrategy::try_from_value(&4).unwrap(),
            SelectionStrategy::History(HistorySelectionStrategy::SpecificContentKey)
        );
        assert_eq!(
            SelectionStrategy::try_from_value(&5).unwrap(),
            SelectionStrategy::History(HistorySelectionStrategy::FourFours)
        );
    }

    #[test]
    fn test_selection_strategy_as_text() {
        assert_eq!(
            SelectionStrategy::History(HistorySelectionStrategy::Latest).as_text(),
            "Latest"
        );
        assert_eq!(
            SelectionStrategy::History(HistorySelectionStrategy::Random).as_text(),
            "Random"
        );
        assert_eq!(
            SelectionStrategy::History(HistorySelectionStrategy::Failed).as_text(),
            "Failed"
        );
        assert_eq!(
            SelectionStrategy::History(HistorySelectionStrategy::SelectOldestUnaudited).as_text(),
            "Select Oldest Unaudited"
        );
        assert_eq!(
            SelectionStrategy::History(HistorySelectionStrategy::SpecificContentKey).as_text(),
            "Specific Content Key"
        );
        assert_eq!(
            SelectionStrategy::History(HistorySelectionStrategy::FourFours).as_text(),
            "FourFours"
        );
    }

    #[test]
    fn test_selection_strategy_from_text() {
        assert_eq!(
            HistorySelectionStrategy::try_from("Latest".to_string()).unwrap(),
            HistorySelectionStrategy::Latest,
        );
        assert_eq!(
            HistorySelectionStrategy::try_from("Random".to_string()).unwrap(),
            HistorySelectionStrategy::Random,
        );
        assert_eq!(
            HistorySelectionStrategy::try_from("Failed".to_string()).unwrap(),
            HistorySelectionStrategy::Failed
        );
        assert_eq!(
            HistorySelectionStrategy::try_from("SelectOldestUnaudited".to_string()).unwrap(),
            HistorySelectionStrategy::SelectOldestUnaudited
        );
        assert_eq!(
            HistorySelectionStrategy::try_from("SpecificContentKey".to_string()).unwrap(),
            HistorySelectionStrategy::SpecificContentKey
        );
        assert_eq!(
            HistorySelectionStrategy::try_from("FourFours".to_string()).unwrap(),
            HistorySelectionStrategy::FourFours
        );
    }

    #[test]
    fn test_from_selection_strategy_to_value() {
        assert_eq!(
            Value::from(SelectionStrategy::History(HistorySelectionStrategy::Latest)),
            Value::Int(Some(0))
        );
        assert_eq!(
            Value::from(SelectionStrategy::History(HistorySelectionStrategy::Random)),
            Value::Int(Some(1))
        );
        assert_eq!(
            Value::from(SelectionStrategy::History(HistorySelectionStrategy::Failed)),
            Value::Int(Some(2))
        );
        assert_eq!(
            Value::from(SelectionStrategy::History(
                HistorySelectionStrategy::SelectOldestUnaudited
            )),
            Value::Int(Some(3))
        );
        assert_eq!(
            Value::from(SelectionStrategy::History(
                HistorySelectionStrategy::SpecificContentKey
            )),
            Value::Int(Some(4))
        );
        assert_eq!(
            Value::from(SelectionStrategy::History(
                HistorySelectionStrategy::FourFours
            )),
            Value::Int(Some(5))
        );
    }
}
