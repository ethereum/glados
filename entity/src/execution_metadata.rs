//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.7

use anyhow::Result;
use sea_orm::{entity::prelude::*, ActiveValue::NotSet, Set};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "execution_metadata")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub content: i32,
    #[sea_orm(unique)]
    pub block_number: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::content::Entity",
        from = "Column::Content",
        to = "super::content::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    Content,
}

impl Related<super::content::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Content.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

/// Stores metadata about an item in the Content table. If already
/// present, returns the entry.
pub async fn get_or_create(
    content_foreign_id: i32,
    block_number: i32,
    conn: &DatabaseConnection,
) -> Result<Model> {
    if let Some(metadata_model) = Entity::find()
        .filter(Column::Content.eq(content_foreign_id))
        .one(conn)
        .await?
    {
        // If there is an existing record, return it
        return Ok(metadata_model);
    }

    // If no record exists, create one and return it
    let metadata_model = ActiveModel {
        id: NotSet,
        content: Set(content_foreign_id),
        block_number: Set(block_number),
    };
    Ok(metadata_model.insert(conn).await?)
}

/// Returns the an execution metadata item if present.
///
/// Used during auditing. Returning none indicates a failed audit.
///
/// The foreign id is the database-assigned id for a content_key
/// (not the portal network content_id).
pub async fn get(
    // The database-assigned id for a content key.
    //
    // This is not the portal network content_id.
    content_key_foreign_id: i32,
    conn: &DatabaseConnection,
) -> Result<Option<Model>, DbErr> {
    Entity::find()
        .filter(Column::Content.eq(content_key_foreign_id))
        .one(conn)
        .await
}
